# First things first:  Remap the prefix key to reduce conflicts with Emacs!
unbind C-b
set -g prefix C-f

set-option -g default-shell $SHELL
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Reload tmux config so we can pick up changes to this file without needing to restart tmux
bind r source-file ~/.tmux.conf \; display "Reloaded tmux configuration!"

# Index windows from 1, not 0, so they line up a little better
# with the order of the number keys on the keyboard
set -g base-index 1
setw -g pane-base-index 1

# Reduce the command delay time to something a bit shorter
set -sg escape-time 1
# Extend the repeat interval for repeatable commands (e.g., resize-pane)
set -sg repeat-time 1000

# Let's use a mouse sometimes
set-option -g mouse on

##### Scrollback Navigation #####

# Use vi-style navigation in Copy mode (which is also scrollback mode)
setw -g mode-keys vi



##### Window/Pane Management #####

# Split windows more intuitively (except for the fact that tmux doesn't
# understand that a horizontal split means the pane should be split down the
# middle horizontally, and likewise for a vertical split).
bind | split-window -h # horizontal columns
bind - split-window -v # vertical rows

# Navigate panes vim-style!
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R

# And windows too!
bind -r C-l select-window -t :+
bind -r C-h select-window -t :-

# Quickly jump between two windows
bind i last-window

# Resizing panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Renumber windows
bind m command-prompt -p "move window to:"  "move-window -t '%%'"

##### Colors #####
# Ensure we're using 256 colors
set -g default-terminal "screen-256color"

# Status bar
set -g status-fg black
set -g status-bg green

# Window list
setw -g window-status-fg black
setw -g window-status-bg default
setw -g window-status-current-fg white
setw -g window-status-current-bg black

# Pane borders
set -g pane-border-fg green
set -g pane-border-bg black
set -g pane-active-border-fg green
set -g pane-active-border-bg yellow

# Command line
set -g message-fg white
set -g message-bg black
set -g message-attr bright

# Status Bar Items
set -g status-left-length 40
set -g status-left "#[fg=white,bold]#S #[fg=white,bold]#I #[fg=white,bold]#P "
set -g status-right "#[fg=black]%d-%b %R "
set -g status-justify centre
set -g status-interval 5

# Monitor windows for activity
setw -g monitor-activity on
set -g visual-activity on

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Break out the current pane into a new session based on the current directory
bind-key C-b send-keys '~/tat && exit' 'C-m'

# Don't let new processes rename the window
set-option -g allow-rename off

# Kill the current session
# bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'


